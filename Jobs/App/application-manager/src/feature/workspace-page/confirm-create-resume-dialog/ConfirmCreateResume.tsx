import {DialogBox} from "@/common-components/aam-dialog-box/DialogBox.tsx";
import { getJobDetails, JobDetails, jobDetailsToString } from "@/services/JobServices";
import { getItem } from "@/utils/localStorage";
import pdfToText from "react-pdftotext";
import { access_token_key } from "../WorkspacePage";
import { getResume } from "@/services/llmServices";
import { useState } from "react";
import {toast} from "sonner";

export interface IConfirmCreateResumeProps{
    isOpen: boolean,
    onClose: ()=>void,
    referenceResume: File,
    jobs: JobDetails[]
}
export const ConfirmCreateResume = (props: IConfirmCreateResumeProps) =>{
    const [isLoading, setIsLoading] = useState<boolean>(false);

    const handleCreateResume = async () => {
        const { jobs, referenceResume }= props;
        const resumeData = await pdfToText(referenceResume);
        const accessToken = getItem(access_token_key);
        setIsLoading(true);

        const resumePromises = jobs.map(async (job) => {
            const updatedJobDetails = await getJobDetails(job.jobId);
            const updatedJobDetailsString = jobDetailsToString(updatedJobDetails);
            try {
                const response = await getResume(resumeData, updatedJobDetailsString, accessToken);
                if (response.docUrl) {
                    job.resumeUrl = response.docUrl;
                    job.isResumeAvailable = true;
                }
            } catch (error) {
                toast.error('Error while creating resume: ' + error);
            }
        });

        // Wait for all async resume fetches to complete
        await Promise.all(resumePromises);

        // All jobs have been updated
        props.onClose();
        setIsLoading(false);
    }

    return <DialogBox isOpen={props.isOpen}
                      title={'Create Resume'}
                      isLoading={isLoading}
                      description={'Are you sure you want to create resume. The files generated by LLM are not accurate. Please revisit them after creation.'}
                      confirmText={'Confirm'}
                      cancelText={'cancel'}
                      onConfirm={handleCreateResume}
                      onClose={()=>{props.onClose()}}/>
}